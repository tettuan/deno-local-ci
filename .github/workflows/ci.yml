name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        deno-version: [v2.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Verify Deno version
        run: deno --version

      - name: Clean and regenerate lock file
        run: |
          # Remove existing lock file
          rm -f deno.lock
          
          # Cache dependencies to regenerate lock file
          deno cache mod.ts
          deno cache $(find . -name "*.test.ts" | tr '\n' ' ')
          
          # Verify lock file was created
          ls -la deno.lock || echo "Warning: Lock file not generated"

      - name: Verify project structure
        run: |
          echo "Project structure:"
          find . -type f -name "*.ts" -o -name "*.json" -o -name "*.md" | head -20
        shell: bash

      - name: Type check
        run: deno check mod.ts

      - name: Run tests
        run: deno task test

      - name: Format check
        run: deno fmt --check

      - name: Lint check
        run: deno lint

      - name: Test JSR publish (dry run)
        run: deno publish --dry-run

  compatibility:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deno-version: [v2.0.x, v2.1.x, v2.2.x, v2.3.x, v2.4.x, v2.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno ${{ matrix.deno-version }}
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Verify Deno version
        run: deno --version

      - name: Clean and regenerate lock file
        run: |
          # Remove existing lock file
          rm -f deno.lock
          
          # Cache dependencies to regenerate lock file for compatibility test
          deno cache mod.ts
          deno cache $(find . -name "*.test.ts" | tr '\n' ' ')

      - name: Type check
        run: deno check mod.ts

      - name: Run basic functionality test
        run: |
          # Test that the module can be imported and basic functionality works
          deno eval "
          import { CLIParser } from './mod.ts';
          const parseResult = CLIParser.parseArgs(['--help']);
          if (parseResult.ok) {
            console.log('✅ Module loads and basic functionality works');
          } else {
            console.log('❌ Basic functionality test failed');
            Deno.exit(1);
          }
          "
